% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exported_funcs.R
\name{any_false}
\alias{any_false}
\title{Alias for \code{any(!(...))}}
\usage{
any_false(..., na.rm = FALSE)
}
\arguments{
\item{...}{(Vectors) Zero or more logical vectors.}

\item{na.rm}{(Logical) If \code{TRUE}, \code{NA} values are removed before the result is computed.}
}
\value{
Logical vector.
}
\description{
\code{any(...)} returns \code{TRUE} if anything in \code{...} is \code{TRUE}, so \code{any_false(...)} returns
\code{TRUE} if anything in \code{...} is \code{FALSE}.
}
\details{
This function exists to avoid confusion when negating \code{any()};
\code{any(!c(TRUE, FALSE)) == TRUE}, but \code{!any(c(TRUE, FALSE)) == FALSE}, and the difference
is which part of the expression you negate. In many cases, you want the former because
you are testing whether anything in the vector is \code{FALSE}, and that's what this
function does.
}
\section{Authors}{

\itemize{
\item Desi Quintans (\url{http://www.desiquintans.com})
}
}

\examples{
any_false(c(TRUE, TRUE))
#> [1] FALSE

any_false(c(FALSE, FALSE))
#> [1] TRUE

any_false(c(TRUE, FALSE))
#> [1] TRUE

}
